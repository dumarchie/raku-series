#!/usr/bin/env raku
use v6.d;

use lib 'lib';
use Series;

constant Format = "%-60s%0.3fs\n";
sub benchmark(&work, $desc) {
    my \result = work;
    printf Format, $desc, now - ENTER now;
    result;
}

my %Build = (
  operator => {
      my Series $series;
      benchmark {
          $series := $_ :: $series for (^$_).reverse;
          $series;
      }, "Use infix :: to create a Series of $_ nodes";
  },
  insert => {
      my Series $series;
      benchmark {
          $series := $series.insert($_) for (^$_).reverse;
          $series;
      }, "Use .insert(value) to create a Series of $_ nodes";
  },
  slip => {
      benchmark {
          Series.new(slip ^$_);
      }, "Use .new(slip values) to create a Series of $_ nodes";
  }
);

my %Traversal = (
  elems => sub ($series) {
      benchmark {
          $series.elems;
      }, '.elems';
  },
  list => sub ($series) {
      benchmark {
          $series.list.elems;
      }, '.list.elems';
  },
);

enum Build     <insert operator slip>;
enum Traversal <elems list>;
sub MAIN(
  Int()     :$nodes  = 3E6,      #= number of nodes in the series
  Build     :$method = operator, #= method to create the series
  Traversal :$assess = elems,    #= traversal method to assess
) {
    my $series := %Build{$method}($nodes);
    %Traversal{$assess}($series);
}
